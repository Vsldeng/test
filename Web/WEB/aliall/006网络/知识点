cookie
    http协议
        超文本传输协议，从web服务器传输超文本到本地浏览器时遵循的传输协议，无状态协议
        通信协议：
            tcp/ip四层模型：数据链路 网络 传输 应用层（http属于应用层）
        无状态协议：
            每次浏览器向服务器发出请求时，服务器都不记录这个请求
            有时候我们需要记录一些数据，就用cookie
    cookie的概念
        cookie是指缓存在本地客户端的数据
        重名的cookie会覆盖
    cookie的基本操作
        增
            document.cookie="username=Kmckk;expires="+oDate;
        删
            var oDate=new Date();
            oDate.setDate(oDate.getDate()-3);//日期设置为过去的日期
            document.cookie="username=Kmckk;expires="+oDate;
        改
            document.cookie="username=Kmckk1";
        查
            console.log(document.cookie);
    cookie的封装:见006-002demo2.html
        setCookie()
        getCookie()
        removeCookie()
http
    TCP是端到端的可靠的面向连接的协议，http基于传输层，tcp不必担心数据传输问题
    阶段
        浏览器输入网址后，具体发生了什么
            dns域名解析得到ip
                递归查询，浏览器dns缓存，系统dns缓存，hosts文件，域名解析服务器（顶级域名服务器，向下逐级查找）
            根据这个ip找到对应的服务器，发起tcp三次握手

            建立tcp链接，发起http请求
            服务器响应http请求，浏览器得到html代码
            浏览器解析html代码，并请求html代码中的资源（js，css，img）
                解析html渲染成dom树
                解析css文件构成渲染树
                边解析边渲染
                js单线程运行，js可能修改dom结构，所以js会阻塞后续资源下载
            浏览器对页面进行渲染，呈现给用户
            服务器关闭tcp链接（四次挥手）
    html渲染过程
        解析html渲染成dom树
        解析css文件构成渲染树
        边解析边渲染
        js单线程运行，js可能修改dom结构，所以js会阻塞后续资源下载
    http请求状态码
        分类：
            1**服务器接收到请求
            2**请求被处理
            3**重定向，需要进一步操作以完成请求
            4**客户端错误，请求中包换错误语法无法完成请求
            5**服务器错误
        常用
            200：请求正常处理
            204：处理成功，但没有资源可返回
            206：客户端进行了范围请求，响应报文中包含content-range指定范围的实体内
            
            301：永久重定向，url更新了
            304：临时重定向
            303：客户端应该采用get方法获取找资源
            304：资源找到了，但不符合请求条件
            
            400：语法错误
            403：被拒绝，没有权限
            404：服务器没有找到请求的资源
            
            500：内部资源故障了
            503：服务器忙碌
安全性问题
    CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，
        在第三方网站中，向被攻击网站发送跨站请求。
        利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，
        达到冒充用户对被攻击的网站执行某项操作的目的。
            解决方法
                阻止不明外域的访问
                提交时要求附加本域才能获取的信息
    XSS代码注入攻击
        通过混入原有代码，更改网站
        输入过滤
