jQuery简介
   概念：是一个JavaScript的轻量级库，但不是JavaScript
   兼容性：兼容css3及各种浏览器
   用处：能使用户更方便的处理HTML、events、实现动画效果，并且方便的为网站提供Ajax交互
   优势：文档说明很全，各种应用也说得很详细，同时还有许多成熟的插件可供选择
   核心思想：write less，do more//写的少，做的多
jQuery引入
    官网下载：http://jquery.com
      compressed/uncompressed(压缩的版本/未压缩的版本)
         未压缩：空格换行单词完整，适合阅读
         压缩的：无空格单词不完整
         项目开发用未压缩版，项目发布用压缩版
    项目引入jQuery库
      jQuery引入要放在js引入的上部
    编写jQuery代码
        // 原生js的固定写法
         window.onload=function(ev){

         }
        //jQuery的固定写法
         $(document).ready(function(){
               alert("hello world")
         });
   //$就是jQuery
      功能：从页面上选取元素
      返回值：伪数组（jQuery的实例）
      jQuery对象的方法，是直接定义在jQuery原型上的
入口函数
   原生js的加载模式不同
      原生js会等到dom元素加载完毕，并且图片也加载完毕才会执行
      jQuery会等到dom元素加载完毕，但不会等到图片也加载完毕就会执行

      原生js编写多个入口函数，后面的入口函数会覆盖先写的入口元素
      jQuery编写多个入口函数，后面的不会覆盖前面的
解决冲突问题
   jQuery入口的其他写法
      $(document).ready(function(){

      });
      jQuery(document).ready(function(){

      })
      $(function(){
         //推荐写法
      });
      jQuery(function(){

      })
   冲突：当引用多个框架，会产生冲突
      释放$的使用权
         jQuery.noConflict();//释放了$,不能再使用$改为jQuery，而且必须卸载jQuery方法之前
      自定义访问符号
         var nj=jQuery.noConflict();//自定义nj符号
      nj(function(){
         alert(111);
      });
jQuery的核心函数
   $();//这就代表着调用jQuery的核心函数
   接受参数
      接受一个函数数
            $(function(){
               alert("hello world");
            })
      接受一个字符串
         接受一个字符串选择器
            var $box1=$('.box1');//找到.box1元素对象
            var $box2=$('#box2');//找到id为box2的元素对象
            //返回一个jQuery对象，对象中保存了找到的DOM元素
         接受一个字符串的代码片段
            var $p=$('<p>我是段落</p>');//创建一个p标签
            //返回一个jQuery对象，保存了创建的DOM元素
      接受一个DOM元素
         var span=document.getElementByTagName('span')[0];
         var $span=$(span);//把原生的dom元素会被包装成一个jQuery对象，返回给我们
jQuery对象(伪数组)
   $(function(){
      var $div=$('div');
      console.log($div);
   })
   伪数组
      有0到length-1的属性，并且有length属性
静态方法：js中直接添加到类上的是静态方法，添加到类的原型上是实例方法（静态方法通过类名调用，实例方法通过对象调用）
   js中
      //定义一个js类演示静态方法
      function AClass(){
      }
      AClass.staticMethod=function(){
         alert('staticMethod')
      }
      AClass.staticMethod();
      //给上面的类添加实例方法
      AClass.prototype.instanceMethod=function(){
         alert('instanceMethod');
      }
      var a=new AClass();
      a.instanceMethod();
   jQuery的静态方法
      each()和map():
         each()
            js同款
               //第一个参数：遍历到的元素
               //第二个参数：当前遍历到的索引
               //forEach只能遍历数组，不能遍历伪数组
               var arr=[1,3,5,7,9];
               arr.forEach(function(value,index){
                  console.log(index,value);
               })
            jQuery款//参数顺序不一样/可以遍历伪数组
               $.each(arr,funtion(index,value){
                  console.log(index,value)
               })
         map()
            js同款
               //当前被遍历的元素
               //当前被遍历的索引
               //当前被遍历的数组
               //不能遍历伪数组（和原生的forEach一样）
               arr.map(function(value,index,array){
                  console.log(index,value,array)
               });
            jQuery款//可以遍历伪数组
               参数
                  1.要遍历的数组
                  2.每遍历一个元素之后，执行的回调函数
                  回调函数的参数：
                     1.遍历到的元素
                     2.遍历到的索引
               $.map(arr,function(value,index){

               })
         each()静态和map()静态方法的区别：
            each静态方法，默认返回值，遍历谁救返回谁
            map静态方法，默认返回值是一个空数组
            each不支持在回调函数中对遍历的数组进行处理
            map可以在回调函数中通过return对遍历的数组进行处理，生成一个新数组返回
      jQuery中的其他静态方法
         $.trim()
            var str="     lnj     ";
            var newStr=$.trim(str);  //去掉前后的空格 
         $.isWindow()
            var res=$.isWindow(window);//判断参数是不是window对象
         $.isArray()
            var res=$.isArray(arr);//判断是不是真数组
         $.isFunction()
            var res=$.isFunction(fun);//判断是不是函数
            参数是jQuery会返回true//jQuery是一个函数
               jQuery的本质是一个匿名函数
                  (function(window,undefined){

                  })(window);
         $.holdReady(true);
            原生js
               myBtn.onclick=function(){
                  $.holdReady(false);
                  alert('btn');
               }
            jQuery
               $.holdReady(true);//暂停jQuery的入口函数（ready），页面加载完毕也不执行
               $(document).ready(function(){
                  alert('ready');
               })
jQuery选择器
   基本选择器
      id选择器
         $("#mydiv")
      元素选择器
         $("div")
      类选择器
         $(".mydiv")
      全局选择器
         $("*")
      多重选择器
         $("div,span,p.myClass")
   层次选择器
      范围选择器
         $("form input");//选择form标签元素中的input标签元素
      子级选择器
         $("form input");//选择form标签元素中的input子标签
      邻居选择器
         $("form+input");//选择紧跟着form标签元素的input标签元素
      兄弟选择器
         $("form ~ input");//选择所有与form同级的input标签元素
   基本筛选器
      :first筛选器
         $("li:first");//选择第一个li标签
      :not(:checked)筛选器
         $("input:not(checked)");//选择所有未被选中的input标签
      :even筛选器
         $("tr:even");//选择表格的奇数行tr（索引的偶数行）
      :odd筛选器
         $("tr:odd");//选择表格的偶数行tr（索引的奇数行）
      :eq(1)筛选器
         $("tr:eq(1));//选择表格的第二行tr（参数为索引值）
      :gt(0)筛选器
         $("tr:gt(0));//选择表格索引大于0的tr(参数为索引)
      :lang筛选器
         $("p:lang(it)");//选择所有p的语言属性
      :last筛选器
         $("li:last");//选择最后一个找到的li标签
      :lt(2)筛选器
         $("tr:lt(2)");//选择索引小于2的tr元素（参数为索引）
      :header筛选器
         $(":header").css("background","#EEE");//给所有标题标签设置css的背景样式
      :animated筛选器
         $("#run").onclick(function(){
            $("div:not(:animated)").animated({left:"+=20"},1000);//只有对不执行动画效果的元素执行一个动画效果
         })
      :focus
         elem.toggleClass( "focused", elem.is( ":focus" ) );//给有focus的方法的元素添加focused类名
      :root
         $(":root").css("background-color","yellow);//设置html背景色为黄色，:root选择该文档的根元素
      :target
         //选择由文档url的格式化识别码表示的目标元素
         http://example.com/#foo
         $("p:target");将选择<p id="foo"></p>的元素
   可见性选择器
      :hidden
         $("input:hidden");选择文档中，type="hidden"的input标签元素
      :visible
         $("tr:visible");查找所有可见的tr标签元素
   属性选择器
      [attribute]
         $("div[id]");//选择所有包含id属性的div标签元素
      [attribute=value]
         $("div[id=1]);//选择所有id属性=1的div标签元素
      [attribute!=value]
         $("div[id!=3]);//选择所有id不等于3的div标签元素
      [attribute^=value]
         $("div[id^='new'");//选择所有id以new开始的div元素
      [attribute$=value]
         $("input[name$='letter']");//选择所有以'letter'结尾的input元素
      [attribute*=value]
         $("input[name*='man']");//选择所有name包含man的input标签元素
      复合选择器
         $("input[id][name$='man']");//选择所有包含id并且name属性有man的input标签元素
   结构化伪类选择器
      :first-child
         $("ul li:first-child");//为每一个ul元素匹配第一个li标签元素
      :first-of-type
         $("span:first-of-type");//选择span类型的长子标签元素
      :last-child
         $("ul li:last-child");//选择所有ul元素的最后一个li子元素
      :last-of-type
         $("span:last-of-type");//选择所有作为最后一个子元素的span标签元素
      :nth-child(2)
         $("li ul:nth-child(2)");//选择每个ul的第二个标签子元素
      :nth-last-child(2)
         $("ul li:nth-child(2)");//选择每个ul的倒数第二个标签子元素
      :nth-last-of-type(2)
         $("ul li:nth-last-of-type(2)");//选择每个ul的倒数第二个类型为li的标签子元素
      :nth-of-type(2)
         $("span:nth-of-type(2)");//选择每个span标签，这个span是其所有兄弟span元素中的第二个元素
      :only-child
         $("ul li:only-child");//选择li作为唯一子元素的li标签元素
      :only-of-type
         $("ul li:only-of-type");//选择所有没有（同标签名的兄弟元素）的元素
   表单选择器
      :input
         $(":input");//选择所有input textarea select button元素
      :text
         $(":text");//选择所有单行文本框
      :password
         $(":password");//选择所有密码框
      :radio
         $(":radio");//选择所有单选按钮
      :checkbox
         $(":checkbox");//选择所有复选框
      :button
         $(":submit");//选择所有提交按钮
      :image
         $(":image");//选择所有图像域
      :reset
         $(":reset");//选择所有重置按钮
      :button
         $(":button");//选择所有按钮
      :file
         $(":file");//选择所有文件域
   内容选择器
      :empty
         作用：既没有文本内容也没有子元素的指定元素
         var $div=$("div:empty");
      :contains(text)
         作用：找到包含指定文本内容的指定元素
         var $div=$("div:contains('这是div'));
      :has(selector)
         作用：找到子元素包含selector的指定元素
         var $div=$("div:has('span')");
      :parent
         作用：选择有文本或者子元素的指定元素
         var $div=$("div:parent");
   混淆选择器
      $.escapeSelector('.box1');选择所有.box1的标签元素
属性和属性节点
   什么是属性
      对象身上保存的变量就是属性
   什么是操作属性
      .操作/[]操作
   什么是属性节点
      HTML标签中添加的属性就是属性节点
      浏览器中找到span的DOM元素，展开的列表都是属性，在attributes属性中保存的所有内容都是属性节点
   如何操作属性节点
      元素节点.setAttribute(属性名称，属性值);
      元素节点.getAttribute(属性名称);
      元素节点.removeAttribute(属性名称);
   属性和属性节点什么区别
      任何对象都有属性
      只有DOM元素有属性节点
jQuery操作属性和属性节点     
   属性节点
      attr(name|pro|key.val|fn)
         作用：获取或者设置属性节点的值
         可以传递一个参数，也可以传递两个参数
            一个：
               $("span").attr("class");
                  获取属性节点的值
                  无论找到多少个属性节点，都只会返回第一个元素指定的属性节点的值
            两个：
               $("span").attr("class","box");
               $("span").attr("abc","123");
                  设置属性节点的值
                  找到多少个属性节点，就会设置多少个属性节点
                  如果设置的属性节点不存在，系统会自动新增
      removeAttr(name)
         删除所有找到元素指定的属性节点
            $("span").removeAttr("class");   
         同时删除多个属性节点
            $("span").removeAttr("class name");
   属性
      prop
         特点和attr方法一样
      removeProp
         特点和removeAttr一样
   注意点:
      prop方法不仅能够操作属性，还能操作属性节点
      官方推荐具有true和false两个属性的属性节点（checked，selected，disabled）使用prop，其他的使用attr
      不同点：
         HTML固有的属性，使用prop方法
         HTML我们自定义的属性，使用attr
jQuery类相关操作(005-007demo1.html)
   addClass（class|fn)
      添加一个类，如果添加多个类用空格隔开
   removeClass(class|fn)
      删除一个类，如果删除多个类用空格隔开
   toggleClass(class|fn)
      切换类，有就删除，没有就添加
jQuery对于文本值相关方法(005-008demo1.html)
   html()
      $('div').html("html代码段");//和原生js的innerHTML一模一样
   text()
      和原生的innerText一样 
   val()
      和原生js的.value一样 
jQuery操作css
   css基本操作
      设置
         逐个设置
            $('div').css('width','100px');
            $('div').css('height','100px');
         链式设置(一般不建议超过三步，超过三步考虑分开写)
            $('div').css('width','100px').css('height','100px');
         批量设置
            $('div').css({
               width:'100px',
               height:'100px'
            })
      获取
         $('div').css('width');//获取宽度样式的值
   jQuery位置尺寸操作
   (005-011demo1.html)
      $('.father').width();//直接获取设置的值，不包含其他的东西
         $('.father').width('500px');//设置father元素的宽
      offset([coordinates]);
         获取元素距离窗口的偏移位
      position()
         获取元素距离定位元素的偏移位
         注意点，positon方法和offset的功能不同点，不能设置，相对的对象不同
   （005-012demo1.html)
      scrollTop()
         可以获取元素滚动条距离顶部的距离
         添加数字参数可以设定滚动距离
         注意：ie认为整个滚动条是body的其他浏览器认为滚动条是html的
            要设置兼容ie的方式，html和body的scrollTop相加
jQuery事件操作
   绑定（005-013demo1.html）
      两种绑定事件方式
         eventName(fn);
            编码效率较高
            部分事件jQuery没有实现，不能添加
            注册多个相同或不同事件不会覆盖
         on(eventName,fn);
            编码效率较低
            所有js事件都可以添加
            注册多个相同或不同事件不会覆盖
   移除
      off
         $('button').off();
            off()不传参移除button按钮的所有事件
         $('button').off('click');
            off()传一个参数，移除该指定类型的所有事件
         $('button').off('click',test1);
            off()传两个参，移除指定类型的指定事件
   事件冒泡和默认行为（005-014demo1.html）
      什么是事件冒泡
         子元素绑定事件被触发时，父元素的绑定事件也被触发（事件从里向外的传递）
      如何阻止事件冒泡
         在子元素事件函数中return false
         事件回调函数会得到一个event，写作形参
            event.stopPropagation();
      什么是默认行为
         a标签点击跳转，这就是默认行为
         表单点击submit自动会提交表单给action网址
      如何阻止默认行为
         在想阻止的默认标签的回调函数上使用return false
         event.preventDefault();
   jQuery事件自动触发
      $('.father').trigger('click');
      $('.father').triggerHandler('click');
      区别
         trigger会触发事件冒泡triggerHandler不会触发事件冒泡
         trigger会触发事件的默认行为，triggerHandler不会触发默认行为
      注意：
         trigger不能自动触发a的默认事件
            想触发a的默认事件需要给a内的span绑定点击事件和自动点击事件
            <a href="http://www.baidu.com"><span>注册</span></a>
   jQuery自定义事件
      不能通过eventName(fn)
      只能通过on来绑定事件
         $('.son').on('myClick',fucntion(){
            alert('son');
         })
      自定义事件条件
         只能通过on来绑定
         事件必须通过trigger触发
   jQuery事件的命名空间
      条件：
         通过on绑定的事件
      $('.son').on('click.zs',function(){
         alert('click1');
      })
      $('.son').on('click.ls',function(){
         alert('click1');
      })
      $('.son').trigger('click.zs');
   jQuery事件委托(005-016demo1.html,005-017demo1.html)
      什么是事件委托
         请别人帮忙做事情，将做完的结果反馈给我们
      找一个入口函数执行前就有的元素，增加事件
      $('ul').delegate('li','click',function(){
         alert($(this).html());
      })
      将li的事件委托给ul，运用了事件冒泡，this是点击的元素
   jQuery移入移出事件
      $(".father").mouseover(function(){
          alert('father被移入');
      })
      $(".father").mouseout(function(){
         alert('father被移出');
      })
      -----------------------------------
      阻止子元素冒泡
         $(".father").mouseenter(function(){
            alert('father被移入');
         })
         $(".father").mouseleave(function(){
            alert('father被移出');
         })
      -----------------------------------
         
      同时监听移入和移出
      子元素移入移出，会触发父元素的事件