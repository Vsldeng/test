学习javaScript前要具备html和css编程基础
简介
    轻量级脚本语言，嵌入式语言，对象模型语言简称js
    只包括两部分：
        基本语法构造
            操作符、控制结构、语句
        标准库
            Array、Data、Math
    实现复杂操作，需要宿主环境提供的API
        浏览器和操作系统是最常见的宿主
    用处：
        网页特效
        服务端开发(node.js)
        命令行工具(node.js)
        桌面程序
        App
        控制硬件
        游戏开发
    学习方法
        语法结构部分
            语言规则
            内置对象
        宿主环境部分
            浏览器环境：
                BOM 
                    弹窗、跳转、缓存、历史
                DOM
                    js对html标签及属性的增删改查
                网络控制类型
                    HTTP，WebSocket
            服务端环境
    历史：
        布兰登艾奇十天写出js
js写法:不能单独在浏览器中打开，必须引入或者内嵌在html页面中才能生效
    行内方式
    标签方式
    单文件写法
        注意：如果使用外部引用，那么script标签中就不要再写其他的js代码了，写了不报错，也不运行
变量：变量就是存储数据的容器
    概念：
        存储数据的标识符，根据变量名，可以获取到内存中存储的数据
        使用变量可以方便的获取或者修改内存中的数据
    声明变量并赋值
        var a=20;
        var a=12,b=13,c=14;
    变量名的规范
        由数字、字母、下划线、$符号组成，且不能以数字开头
        变量名字不能是关键字
        建议变量名必须语义化
        变量区分大小写
        名字相同，后面的会替换前面的
        尽量使用驼峰法命名
数据类型（基本类型）
    数值
        数字+数字是加法运算
    字符串
        字符串会被单引号/双引号引起来
        字符串里使用引号，需要使用转义字符\"
        单引号或双引号不能叠加使用，可以交叉使用
        数字+字符串是字符串拼接
    布尔
        true/false
            true=1/false=0
    undefined
        声明未赋值
    null
        标识空，变量的值如果想为空，必须手动设置
        一般是指空对象
数据类型（复合类型）
    对象（object）
代码注释
    ctrl+/
数据类型转换（typeof 变量//判断变量数据类型）
    转换字符串类型：3种方法
        var n=5;
        n.toString();//数值变字符串
        Sting(n);
        n=字符串+n;//n=n+字符串;
    转换数值类型：
        Number()方法
            
            var c=Number('c');//NaN
            var d=Number('null');//0
            var e=Number('undefined');//NaN
        parseInt()方法
            var a=parseInt('2');//NaN
            var b=parseInt('k23');//NaN
            var c=parseInt('null');//NaN
            var d=parseInt('undefined');//NaN
        parseFloat方法
            var a=parseFloat('1.23df');//1.23
            var b=parseFloat('1.2.3.2);//1.2
            其他的全是NaN
            parseInt和parseFloat遇到数字开头的字符串，都会省略掉后面不认识的部分
    转换布尔类型
        var a=Boolean('0');//true
        var b=Boolean(0);//false
        var c=Boolean('2');//true
        var d=Boolean(null);//false
        var e=Boolean(undefined);//false
        var f=Boolean('');//false
        字符串只要有内容，转为Boolean就为true
操作符
    表达式：值和操作符，运算会有一个结果
    算数运算符：
        +-*/%（加减乘除 取余）
    一元运算符：只有一个值运算
        ++（自加）
        --（自减）
        放前面，先计算再赋值
        放后面先赋值再计算
    逻辑运算符:布尔运算符
        &&逻辑与运算符（两边数据同时为真才为真）
        ||逻辑或运算符（两边数据只要有一个为真就为真）
        !逻辑非运算符（取反）
        优先级：先&&后||
        js中逻辑运算的结果是决定整个表达式的子表达式的值
    比较运算符
        <、>、<=、>=、==、===、!=、!==
        js是弱类型语言，存在自动转换
    赋值运算符
        //= += -= /= *= %=
    运算符的优先级
        从上往下运算
            1.()强行提升优先级最高
            2.一元运算符++ -- !
            3.算数运算符  先*/%后+-
            4.关系运算符> < >= <=
            5.相等运算符 == === != !==
            6.逻辑运算符先&&后||
            7.赋值运算
流程控制
    顺序结构
        代码正常从上到下执行
    分支结构
        if() else if()
        switch(值){
            case 值:
                code:
                break;
            case 值:
                code:
                break;
            case 值:
                code:
                break;
            default:
                code:
                break;
        }
    循环结构
        for while do{}while()
    continue和break
        break立刻跳出该次循环的所有循环
        continue立刻跳出该次循环
object
    JavaScript是面向对象编程
        对象具有特征（属性）和行为（方法）//官方规定，对象没有方法这个概念，因为方法也是属性
            类似杯子->实例化高脚杯（没有把，底座很高，用来喝红酒）
                高脚杯就是对象，而杯子是类
        对象的声明
            字面量声明对象：
                var obj={
                    age:21;
                    f1:function(){
                        alert(1);
                    }
                }
            实例化方式：使用内置的构造函数
                var obj= new Object();
            自定义构造函数方式
                function Fun(){
                    
                }
                var f=new Fun();
        获取对象的属性或方法
            obj.f1();
            obj.age;
        this是个对象
            方法中的this指向（就是）这个方法所在的对象
            普通的函数也具有this，this指向window(全局对象)，所以this.a未定义，this存在，所以不报错
            this的指向
                this指向调用该函数的对象
                可以用call和apply的第一个参数强行修改this指针
                call和apply区别在于传参，call传字符串，apply传数组
        对象属性的遍历及删除
            遍历
                for...in
                for(键 in 对象)
                for(var key in obj){
                    console(obj.[k])
                }
                可以循环遍历对象，也可以循环遍历数组
            删除
                delet obj.age;//删除了obj的age属性
    包装对象
        三种原始类型
            Number String Boolean
            在一定条件下可以自动转换为对象：称之为包装对象
            var v1=new Number(123);
            原始值可以自动当作对象来调用，可以调用各种属性及方法
            如果包装对象使用完成、会立即销毁
                var a='123'
                a.length;//这个瞬间a变成了包装对象，而后瞬间销毁
    数组（Array）
        创建数组
            字面量方式
                arr=[1,2,3];
            构造函数方式
                var arr=new Array('2','2',3,'a');//存放数据的数组
                var arr=new Array(3);//具有三个空间的数组
                a1.length;//数组的长度
        数组里添加数组(二元数组)
            var arr=[1,[2,2],3];
        获取数组元素
            var arr=['red','yellow','green'，['1','2','3']];//数组的索引叫做下标
            获取yellow
                a[1];   
            获取2
                a[3][1];
        遍历数组
            循环分支
            
    函数（Function）
        概念：将一段相对独立，具有特定功能的代码封装起来，形成一个独立的个体，可以重复使用
        声明方式
            关键字声明（字面量声明）
                function cal(){
                    code:
                }
            表达式声明
                var cal=function(){
                    code：
                }
        调用方式：函数声明后，里面的代码是不会执行的，想要执行，必须调用
            cal();//调用函数
        函数的参数
            function cal（a）{
                //a是形参
            }
            cal（a）；//a是实参
            形参是在声明函数时定义的（但未赋值，仅仅是一个占位），多个形参使用逗号隔开
            形参传入的值要和实参一一对应，如果过多多余的设置未undefined，少的，实参被省略
            实参在调用时，实际传入函数的值，传入后在函数中，使用形参获取具体的值
        函数的返回值
            return 返回值
            函数没有设置return 返回值就是undefined
            设置return 没有返回值，得到的实际返回值依然是undefined
            return代表函数调用结束，后面的代码不执行
        匿名函数：函数本身没有名字
            (function(){
                alert(123);
            })();//后面这个小括号用来自执行该匿名函数//又叫立即执行函数
            //这样设定，可以防止全局变量污染，封装一个局部作用域
        函数当作参数
            函数也是一种数据类型
                typeof cal；//是Function
                var f1=function(s1){
                    s1();
                }
                var f2=function(){
                    console.log(111);
                }
                f1(f2);
                //回调概念
            function f1(){
                var a=10;
                var f2=function(){
                    alert(2);
                }
                return f2;
            }
            //形成了闭包
            f1()();//f2返回后，后面的括号让其直接执行
作用域与js代码的运行
    作用域：
        全局作用域（全局变量）
            函数外面就是全局作用域
            在全局作用域中获取不到局部变量
        局部作用域（局部变量）
            函数里面就是局部作用域
            函数执行后，会销毁内部变量
        只有函数能制造作用域
            函数嵌套形成作用域链
                局部作用域内调用变量会向上逐级搜索作用域链
    变量提升：
        js的执行过程会先编译（解析），后运行所以：
            var a=1；会先声明a变量，这个操作会提升到作用域最上方
        js执行过程分解：
            编译过程：
                检查语法错误
                给变量声明
            运行过程
                变量的赋值
                代码流程的执行
        函数的名字和变量的名字重名：
        函数的声明会替换变量的声明！！但因为赋值始终在后，所以写在后面的赋值，会替换掉前面的赋值
js标准库
    Math(数学对象)
        var x=2;
        Math.abs(x);//返回x的绝对值
        Math.random();//0-1随机值（不包含1）
            Math.random()*(8-2)+2；//取值2-8
        Math.floor(x)//返回x向下取整的最大整数
    Date(日期对象)
        实例化构造函数获取时间对象
            var da=new Date();//获取当前时间
            var n=Date.now();//获取从1970年到现在的毫秒
            da.getFullYear();
            da.getHourse();
            da.getDate();
        js获取时间是本地时间
    Array(数组对象)
        var b=7;
        var arr=[1,2,3,4,5,6];
        var arr1=[8,9,10];
        arr.length;
        arr.push(b);//末端插入b
        arr.pop();//末端弹出
        arr.slice(begin,end);//返回一个新的数组，从索引begin开始到索引end结束，不改变原数组
        arr.concat(arr1);//返回一个新数组不影响原数组，拼接arr和arr1
        arr.join();//将数组变成字符串，默认逗号隔开，可以设定参数
    String(字符串对象)
        var s='kiakkkkes';
        s.length;//获取长度
        s.indexof('e');//找到s中第一次出现e的索引
        s.substr(start,num);//从start索引开始，截取num个字符返回
        s.toLowerCase();//所有字符变为小写
        s.toUpperCase();//所有字符转大写
        s.replace('a','k');//第一个a换成k
        s.trim();从字符串两端删除全部空格
