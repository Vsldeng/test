基本数据类型
  number string boolean null undefine
复合数据类型
  数组：存储大量的数据
    数组的概念：一组数据（一般情况下相同类型的），数组的作用使使用单独的变量来存储一系列值
    定义：
      1、使用new var arr= new Array(1，true,'hello');//如果参数只有一个数字类型，那这个数字是数组的长度，数组为空
      2、省略new var arr=Arry(1,true,'hello')
      3、常量创建数组：var arr=[1,2,3];//用的较多
    数组的属性：
      数组的长度：
        arr.length访问，数组中元素的个数，length是可以修改的，修改后，省略掉没有位置的数据
      数组的访问：
        通过数组的下标（索引）即元素的序号，从0开始，下标可以是变量或者表达式
        for循环
        for in
          for(var 变量 in 数组)
            for(var i in arr){
              document.write(arr[i]+'<br />')
            }
    数组的方法：
      栈方法：为了实现栈这个结构而实现的方法
        arr.push('a','b')//给arr数组末尾添加a,b元素
          方法返回值为添加元素后数组的长度
        arr.pop()//移除数组末尾的一个元素
          返回值是被移除的元素
      队列方法：为了实现队列结构而实现的方法
        进：push()出：shift()
        arr.shift()//arr从数组头部弹出一个元素
          返回值是弹出的元素
        arr.unshift('a','b')//给arr头部插入a和b
          返回值是插入元素后的数组长度
      concat（）
        arr1.concat(arr2)//arr1和arr2合并，源数组不会被改变
          返回我们合并好的新数组
      slice（）
        arr.slice(1,3)//从arr的1号索引，到3号索引，创建新数组，不影响原数组
          返回指定区域生成的新数组
      splice（）
        arr.splice(1,2,3)//从1号索引开始删除两个元素，并从一号位置开始插入3
          会对原数组修改，返回值是我们删除掉的元素
        原理：先删除再插入
      join（）
        arr.join("+")//把数组的每一项用+拼接在一起，形成一个字符串
          返回拼接好的字符串
    二维数组：
    1   2  3  4  5
    6   7  8  9  10
    11  12 13 14 15//数组中的元素还是数组
    var count=0;//从1-25累加的中间变量
    for(var i=0;i<5;i++){
      var newArr=[];
      for(var j-0;j<5;j++){
        newArr.push(++count);
      }
      arr.push(newArr);
    }
    数组的排序：
      系统提供的排序方法：
        reverse（）逆向排序
          arr.serverse()//元素翻转
        sort（）
          arr.sort()//将数组中的元素升序排序（按字符串排序，按ascll码排序）
          一般情况下，我们需要自己编写排序算法，系统提供给我们的排序方法，用的比较少
    冒泡排序：
      原理：前后两个数两两进行比较，如果符合交换条件就交换位置，直到所有数据排序完成，结束比较
    选择排序：
      原理：通过比较选出最小的数，放在第一个位置，然后在其余的数中选出次小数，以此类推，直到所有的数成为有数序列
    数组的引用
      数组是复合数据类型，也是引用数据类型，数组的内存空间是固定的，任何赋值行为，都是引用赋值
      所有的复合类型并不存储在函数中，而是存储在堆栈中
      在堆中我们可以想要使用多少内存就随时分配
      
Math.random() 可以随机0-1间任意的数