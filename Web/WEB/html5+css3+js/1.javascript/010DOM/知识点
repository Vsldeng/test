DOM
    概念：Document object model（文档对象模型）
    w3c规定文档对象模型dom是中立于平台和语言的接口，它允许程序和脚本动态的访问和更新文档的内容、结构和样式
    js中所有的节点都是对象
    html css组成页面，js 页面行为操作
        DOM是大同html css和js壁垒的工具
        D可以理解为整个web加载的网页文档，O可以理解为类似window对象之类的东西，可以调用属性和方法（document对象），M可以理解为网页文档的树形结构（节点树）
    dom的分类
        <div title="属性节点">测试Div</div>
        元素节点：<div></div>
        属性节点：title="属性节点”
        文本节点：测试Div
    元素节点的获取方法//因为JavaScript标签规范写在head标签内，使用window.load=function(){}来监听页面加载完毕开始执行
        通过当前元素节点的id来获取对应的元素节点（id唯一，只获取一个元素节点对象）
        通过节点对象，访问它的一系列属性
            tagName
            innerHTML会解析标签
            HTML的属性
                id、style、className、title
                两种获取方式
                    元素节点[属性名]
                    元素节点.属性名
                赋值
                    直接=号赋值
                元素节点.style
                    样式对象[object css2Properties]
                    元素节点.style.width="360px";//修改该元素的宽
                    在css中使用-链接的属性
                        需要将-去掉，后续单词的首字母大写（驼峰式）
        document.getElementsByTagName()
            参数:标签名
            功能:获取当前页面所有该标签，组成一个类似于array的list
        document.getElementById()
            参数：id
            功能：获取当前页面所有id等于当前参数的标签（id唯一，故结果唯一）
            var aLis=document.getElementByTagNmae("ul1");
                两种获取方式
                    aLis[i];
                    aLis.item(i);
        document.getElementsByName()
            参数：name的值
            功能：返回一个装有符合条件的元素节点的类似Array的list
        document.getElementsByClassName()
            参数：class的值
            功能：获取node节点下，所有符合条件的元素节点。
            返回值：所有符合条件的元素节点的对象数组
        获取当前样式
            myDiv.style.backgroundColor;//只能先找到行间的css样式
            getComputedStyle(myDiv)["width"];//可以获取当前有效样式（因为优先级的问题）
            兼容ie
                function getStyle（elem,attr){
                    return elem.currentStyle? elem.currentStyle[attr]:getComputedStyle(elem)[attr];
                }
        浏览器不兼容
            封装一个兼容方法（封装函数）
            //找到parent下所有的元素节点
            function elementByClassName(parent,classStr){
                var node=parent.getElementByTagName('*');
                //如果符合条件，就添加到数组中
                var result=[];
                for(var i=0;i<nodes.length;i++){
                    if(nodes[i].className==classStr){
                        result.push(nodes[i]);
                    }
                }
                return result;
            }
    Attribute方法
        set/getAttribute("title","aaa");
        removeAttribute();
            操作当前元素节点中的某个属性
        myDiv.setAttribute("title","xxx");
        myDiv.title="xxx";
        两种方法的区别
            .方法不能给元素节点对象添加属性，setAttribute可以为元素节点对象设置属性
            .方法不能访问用户自定义的属性，getAttribute可以
            .方法不能删除该属性，removeAttribute方法可以
    元素节点属性
        childNodes获取当前元素节点的所有子节点
            返回一个节点列表，装有当前元素的所有子节点
            包括两种节点类型
                元素节点，文本节点（每个节点都有三个属性）
                    nodeName
                        元素名称，属性名称，#text
                    nodeType
                        1，2，3
                    nodeValue
                        null，属性值，文本内容
            回车换行tab空格都是文本节点
                如何取出这些空白节点
                使用左侧正则表达式验证
                    /^\s+$/.test(nodes[i].nodeValue)
                removeSpaceNode2(myDiv);
                alert(myDiv.childNodes.length)
                function removeSpaceNode(nodes){
                    var result=[];//用来存放不是空白节点的节点
                    for(var i = 0;i<nodes.length;i++){
                        if(nodes[i].nodeValue==3&&/^\s+$/.test(nodes[i].nodeValue)){
                            continue;
                        }
                        result.push(nodes[i]);
                    }
                }
                //上述方法返回一个新的list类数组，必须重新修改页面上的节点
                    function removeSpanceNode2(parent){
                        var nodes=parent.childNodes;
                        for(var i=nodes.length-1;i>=0;i--){
                            if(nodes[i].nodeValue==3&&/^\s+$/.test(nodes[i].nodeValue)){
                                parent.removeChild(nodes[i]);
                            }
                        }
                    }
        firstChild
            快速获取当前元素节点子节点的第一个节点
        lastChild
            快速获取当前元素节点子节点的最后一个节点
        ownerDocument
            返回该节点的文档对象根节点（document）
        parentNode/previousSibling/nextSibling
            返回该节点的父节点/返回前一个兄弟节点/返回后一个兄弟节点
        attributes
            myDiv.attributes//返回该元素节点对象的属性集合[objecct NamedNodeMap]
                返回的集合：不重复，无序
            属性
                attributes.length//属性的个数
                myDiv.attributes.getNamedItem("id");
                    简化
                        myDiv.attributes["id"];
                myDiv.attributes["id"].nodeName/nodeType/nodeValue(获取元素节点的属性)
        DOM节点类型
            元素节点 文本节点 属性节点
    节点方法
        document.write("<h1>我是标题内容</h1>")
            添加内容，覆盖原有的内容
        document.createElement()/parentNode.appendChild(newNode)/document.createTextNode()
            //创建一个元素节点，并插入到页面,并添加文本
            window.onload=function(){
                var myBtn=document.getElementById("btn");
                myBtn.onclick=funciton(){
                    var myText=document.createTextNode("文本内容");
                    var node=document.createElement("span");
                    node.appendChild(myText);
                    document.getElementById("div1").appendChild(node);
                }            
            }
            ---------------------------------------------
            封装一个创建自带文本的元素节点的方法
            var node=createElementWidthTxt("span","文本节点");
        
            function createElementWidthTxt(tagName,txt){
                var node=document.createElement(tagName);
                var text=document.createTextNode(txt);
                node.appendChild(text);
                return node;
            }
        insertBefore()
            父节点.insertBefore(插入的节点，旧节点);
            功能：将插入的节点插入到旧节点之前
            window.onload=funciton(){
                //创建一个strong节点，将这个节点插入到div.div1节点之前
                var node=createElementWidthTxt("strong","strong文字");
                var oDiv=document.getElementByTagName("div")[0];
                oDiv.parentNode.insertBefore(oDiv,node);
            }
            -------------------------------------------
            封装一个insertAfter方法
            function(newNode,oldNode){
                if(oldNode==oldNode.parentNode.lastChild){
                    oldNode.parentNode.appendChild(newNode);
                }else{
                    var brotherNode=oldNode.nextSibling;
                    brotherNode.parentNode.insertBefore(brotherNode,newNode);
                }
            }
        replaceChild()
            父节点.replaceChild(newNode,oldNode);
            功能：用newNode替换oldNode
            window.onload=function(){
                var myDiv=document.getElementById("div1");
                var node=document.createElementWidthTxt("span","替换节点的文本");
                myDiv.parentNode.replaceChild(node,myDiv);
            }
        cloneNode()
            node.cloneNode()
            功能：克隆节点
            返回值：新克隆出来的节点
            参数：默认是false，如果是true，就会复制元素节点中的文本节点
            var cloneNodes=myDiv.cloneNode()
        removeChild()
            node.parentNode.removeChild(node);
            功能：删除自己
            myDiv.parentNode.removeChild(myDiv);
        