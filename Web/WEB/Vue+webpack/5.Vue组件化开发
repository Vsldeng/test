一、组件化开发思想
  标准：统一的标准
    Web Components：通过创建封装好功能的定制元素解决问题
    希望代码尽可能多的重用
    自定义组件不太容易（html、css、js）
    多次使用组件可能导致冲突
  分治：不同功能封装到不同组件
  重用：提高开发效率
  组合：通过组合形成产品

二、组建的注册方式
  全局组件
    Vue.component(组件名称，{
      data：组件数据，//必须是一个函数，形成闭包，让每个组件都有各自的数据
      template：组件模板内容//应该是字符串，应该包含 单个根标签，只有并列兄弟标签，会报错
    })
    短横线方式：button-count
    驼峰方式:buttonCount//如果使用驼峰式命名组件，在使用组件时候，只能在字符串里使用，如果想要在标签模板中使用，必须使用短横线方式
  局部组件
    components:{
      组件名称:获取的对象
    }
    局部组件只能在其父组件中使用
三、Vue调试工具的用法
  devtools:
    克隆仓库
    安装依赖包 npm install
    构建npm run
    打开Chroms页面-开发者模式
    加载解压的扩展，选择shells/chorms
四、组件间的数据交互方式
  父子传递
    String,Object,Number,Array,布尔
    在子组件内
      props:{
        title:Number
      }
    在父组件中
      <子组件名-子组件名 :title="ptitle"><子组件名-子组件名>
      如果用驼峰方式传值，在标签模板中使用，依旧要恢复成短横线方式
  子父传递
    （不禁止，但不推荐）props传递数据原则：单向数据流，不允许子组件直接操作父组件的数据
    子组件：@click="$emit('change-big',1)"
    父组件：@change-big="父组件处理方法($event)"
  兄弟传递
    单独的事件中心管理组件通信
      var eventHub=new Vue()
      一般在mounted钩子函数中使用
      mounted:funtion(){
        //监听方式
        eventHub.$on('a-do',(val)=>{
          count+=val//val=1
        })
      }
      methods:{
        handle:function(){
          //触发方式
          eventHub.$emit('a-do',1)
        }
      }
      在父组件中销毁兄弟组件的交互
        methods:{
          handle:function(){
            hub.$off('a-do')
          }
        }
五、组件插槽的用法
  父组件向子组件传递模板的内容
    父组件
      <子组件-子组件>有bug发生<子组件-子组件>
      <子组件-子组件>有一个警告<子组件-子组件>
    子组件的模板中
      <slot></slot>
    有bug发生和有一个警告会被自动插入子组件的<slot></slot>
  具名插槽
    父组件
      <子组件-子组件>
        <h1 slot="header">标题内容</h1>
      <子组件-子组件>
    子组件
      <slot name="header"></slot>
    父组件中根据slot属性，匹配子组件slot标签name=父组件中slot属性的slot标签
      <template slot="header">
        <p>nbnb</p>
        <p>qianqianqian money money</p>
      </template>
  作用域插槽
    父组件对子组件的内容进行加工
      子组件：
        <slot :info='item'></slot>
      父组件：
        <template slot-scope="slotProps">
          <strong v-if="slotProps.info.id==2">{{slotProps.info.name}}</strong>
          <span v-else>slotProps.info.name</span>
        </template>
六、基于组建的方式实现业务功能